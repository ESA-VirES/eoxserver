#!/bin/sh -e



EXENAME=`basename $0`

# setup color output 
#if tty -s 
RED="\\033[31m"
GRE="\\033[32m"
YEL="\\033[33m"
BLU="\\033[34m"
RES="\\033[m"

tstamp(){ date --rfc-3339=seconds ; } 
error(){ echo -e "`tstamp` ${RED}ERROR: $EXENAME: $* ${RES}" ; }
info(){ echo -e "`tstamp` ${YEL}INFO: $EXENAME: $* ${RES}" ; }
warn(){ echo -e "`tstamp` ${RED}WARNING: $EXENAME: $* ${RES}" ; }

function _locate_conf()
{
    _CONFS="/etc/httpd/conf/httpd.conf /etc/httpd/conf.d/*.conf"
    for _F_ in $_CONFS
    do
        if [ 0 -lt `grep -c "$1" "$_F_"` ]
        then
            echo "$_F_"
            return 0
        fi
    done
    return 1 
}

function locate_apache_conf()
{
    _locate_conf '^[ 	]*<VirtualHost[ 	]*_default_:'${1:-80}'>' || \
    _locate_conf '^[ 	]*<VirtualHost[ 	]*\*:'${1:-80}'>' || true
}

function locate_wsgi_socket_prefix_conf()
{
    _locate_conf '^[ 	]*WSGISocketPrefix' || true
}

function locate_wsgi_daemon()
{
    _locate_conf '^[ 	]*WSGIDaemonProcess[ 	]*'$1 || true
}

function disable_virtual_host()
{
    ex "$1" <<END
/^[ 	]*<VirtualHost/,/<\/VirtualHost>/s/^/#/
wq
END
}

#----------------------------------------------------------------------------

VIRUSER=vagrant
VIRGROUP=vagrant

#----------------------------------------------------------------------------
# Apache setup 

APACHECFG="/etc/httpd/conf.d/00_vires.conf"

info "Installing Apache HTTP server ... "

SOCKET_PREFIX="run/wsgi"

#number of EOxServer processes
EOXSNPROC=4

# STEP 1:  INSTALL RPMS

yum --assumeyes install httpd mod_wsgi mod_ssl


# STEP 2: FIREWALL SETUP

# skipped

# STEP 3: SETUP THE DEFAUT SITE

#NOTE 1: Current setup does not support multiple virtual hosts.

# setup default unsecured site
echo "Default virtual host not located creting own one in: $APACHECFG"
cat >"$APACHECFG" <<END
# default site generated by the automatic EOxServer instance configuration
<VirtualHost _default_:80>
</VirtualHost>
END

# check whether WSGI socket is set already - if not do so
CONF="`locate_wsgi_socket_prefix_conf`"
if [ -z "$CONF" ]
then # set socket prefix if not already set
    echo "WSGISocketPrefix is set to: $SOCKET_PREFIX"
    echo "WSGISocketPrefix $SOCKET_PREFIX" >> /etc/httpd/conf.d/wsgi.conf
else
    echo "WSGISocketPrefix set already:"
    grep -nH WSGISocketPrefix "$CONF"
fi

# STEP 4: setup the common WSGI daemon
WSGI_DAEMON="WSGIDaemonProcess eoxs_ows processes=$EOXSNPROC threads=1 user=$VIRUSER group=$VIRGROUP"
CONF="`locate_wsgi_daemon eoxs_ows`"
if [ -z "$CONF" ]
then
    cat >> /etc/httpd/conf.d/wsgi.conf <<END

# WSGI process daemon used by the EOxServer
$WSGI_DAEMON
END
else
    ex "$CONF" <<END
g/^[ 	]*WSGIDaemonProcess[ 	]*eoxs_ows/d
a
$WSGI_DAEMON
.
wq
END
fi

# STEP 5: START THE SERVICE
# enable the HTTP service
chkconfig httpd on
service httpd start

#----------------------------------------------------------------------------
# PostgreSQL setup 

info "Installing PosgreSQL RDBMS ... "

#======================================================================

# STEP 0: Shut-down the porgress if already installed and running.

if [ -f "/etc/init.d/postgresql" ]
then 
    service postgresql stop || :
    info "Removing the existing PosgreSQL DB cluster ..."
    # remove existing DB cluster - all data will be lost
    [ ! -d "/var/lib/pgsql/data" ] || rm -fR "/var/lib/pgsql/data" 
fi

# STEP 1: INSTALL RPMS

yum --assumeyes install postgresql postgresql-server postgis python-psycopg2

# STEP 2: CONFIGURE THE STORAGE DIRECTORY 

# ... skipped 

# STEP 3: INIT THE DB AND START THE SERVICE  

service postgresql initdb
chkconfig postgresql on
service postgresql start

# STEP 4: SETUP POSTGIS DATABASE TEMPLATE 

if [ -z "`sudo sudo -u postgres psql --list | grep template_postgis`" ] 
then 
    sudo -u postgres createdb template_postgis
    sudo -u postgres createlang plpgsql template_postgis

    PG_SHARE=/usr/share/pgsql

    POSTGIS_SQL="$PG_SHARE/contrib/postgis-64.sql"
    [ -f "$POSTGIS_SQL" ] || POSTGIS_SQL="$PG_SHARE/contrib/postgis.sql"

    sudo -u postgres psql -q -d template_postgis -f "$POSTGIS_SQL"
    sudo -u postgres psql -q -d template_postgis -f "$PG_SHARE/contrib/spatial_ref_sys.sql"
    sudo -u postgres psql -q -d template_postgis -c "GRANT ALL ON geometry_columns TO PUBLIC;"
    sudo -u postgres psql -q -d template_postgis -c "GRANT ALL ON geography_columns TO PUBLIC;"
    sudo -u postgres psql -q -d template_postgis -c "GRANT ALL ON spatial_ref_sys TO PUBLIC;"
fi 

#----------------------------------------------------------------------------
# EOxServer Installation

info "Installing the EOxServer ..."

# Setup EOxServer
export EOX_ROOT=${1:-"/var/eoxserver"}

cd "$EOX_ROOT/"
sudo python setup.py develop

#----------------------------------------------------------------------------
# EOxServer Instance

INSTROOT=/home/vagrant
INSTANCE=vires00

SETTINGS="${INSTROOT}/${INSTANCE}/${INSTANCE}/settings.py"
INSTSTAT_URL="/${INSTANCE}_static" # DO NOT USE THE TRAILING SLASH!!!
INSTSTAT_DIR="${INSTROOT}/${INSTANCE}/${INSTANCE}/static"
WSGI="${INSTROOT}/${INSTANCE}/${INSTANCE}/wsgi.py"
MNGCMD="${INSTROOT}/${INSTANCE}/manage.py"
EOXSLOG="${INSTROOT}/${INSTANCE}/${INSTANCE}/logs/eoxserver.log"

DBENGINE="django.contrib.gis.db.backends.postgis"
DBNAME="eoxs_${INSTANCE}"
DBUSER="eoxs_dbadmin_${INSTANCE}"
DBPASSWD="${INSTANCE}_dbadmin_eoxs_`head -c 24 < /dev/urandom | base64 | tr '/' '_'`"
DBHOST=""
DBPORT=""

PG_HBA="/var/lib/pgsql/data/pg_hba.conf"


info "Creating EOxServer instance '${INSTANCE}' in '$INSTROOT/$INSTANCE' ..."

if [ -d "$INSTROOT/$INSTANCE" ]
then

    info " The instance seems to already exist. All files will be removed!"
    rm -fvR "$INSTROOT/$INSTANCE"
fi

# check availability of the EOxServer
#HINT: Does python complain that the apparently installed EOxServer
#      package is not available? First check that the 'eoxserver' tree is
#      readable by anyone. (E.g. in case of read protected home directory when
#      the development setup is used.)
sudo -u "$VIRUSER" python -c 'import eoxserver' || {
    error "EOxServer does not seem to be installed!"
    exit 1
}

sudo -u "$VIRUSER" mkdir -p "$INSTROOT/$INSTANCE"
sudo -u "$VIRUSER" eoxserver-admin.py create_instance "$INSTANCE" "$INSTROOT/$INSTANCE"


#-------------------------------------------------------------------------------
# create Postgres DB

info "Creating EOxServer instance's Postgres database '$DBNAME' ..."

# deleting any previously existing database
sudo -u postgres psql -q -c "DROP DATABASE $DBNAME ;" 2>/dev/null \
  && warn " The already existing database '$DBNAME' was removed." || /bin/true

# deleting any previously existing user
TMP=`sudo -u postgres psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='$DBUSER' ;"`
if [ 1 == "$TMP" ]
then
    sudo -u postgres psql -q -c "DROP USER $DBUSER ;"
    warn " The alredy existing database user '$DBUSER' was removed"
fi

# create new users
sudo -u postgres psql -q -c "CREATE USER $DBUSER WITH ENCRYPTED PASSWORD '$DBPASSWD' NOSUPERUSER NOCREATEDB NOCREATEROLE ;"
sudo -u postgres psql -q -c "CREATE DATABASE $DBNAME WITH OWNER $DBUSER TEMPLATE template_postgis ENCODING 'UTF-8' ;"

# prepend to the beginning of the acess list
{ sudo -u postgres ex "$PG_HBA" || /bin/true ; } <<END
g/# EOxServer instance:.*\/$INSTANCE/d
g/^[	 ]*local[	 ]*$DBNAME/d
/#[	 ]*TYPE[	 ]*DATABASE[	 ]*USER[	 ]*CIDR-ADDRESS[	 ]*METHOD/a
# EOxServer instance: $INSTROOT/$INSTANCE
local	$DBNAME	$DBUSER	md5
local	$DBNAME	all	reject
.
wq
END

service postgresql restart

#-------------------------------------------------------------------------------
# setup Django DB backend

sudo -u "$VIRUSER" ex "$SETTINGS" <<END
1,\$s/\('ENGINE'[	 ]*:[	 ]*\).*\(,\)/\1'$DBENGINE',/
1,\$s/\('NAME'[	 ]*:[	 ]*\).*\(,\)/\1'$DBNAME',/
1,\$s/\('USER'[	 ]*:[	 ]*\).*\(,\)/\1'$DBUSER',/
1,\$s/\('PASSWORD'[	 ]*:[	 ]*\).*\(,\)/\1'$DBPASSWD',/
1,\$s/\('HOST'[	 ]*:[	 ]*\).*\(,\)/#\1'$DBHOST',/
1,\$s/\('PORT'[	 ]*:[	 ]*\).*\(,\)/#\1'$DBPORT',/
1,\$s:\(STATIC_URL[	 ]*=[	 ]*\).*:\1'$INSTSTAT_URL/':
wq
END
#ALLOWED_HOSTS = []

#-------------------------------------------------------------------------------
# Integration with the Apache web server

info "Mapping EOxServer instance '${INSTANCE}' to URL path '${INSTANCE}' ..."

# locate proper configuration file (see also apache configuration)
{ ex "$APACHECFG" || /bin/true ; } <<END
/EOXS00_BEGIN/,/EOXS00_END/de
/^[ 	]*<\/VirtualHost>/i
    # EOXS00_BEGIN - EOxServer instance - Do not edit or remove this line!

    # EOxServer instance configured by the automatic installation script

    # WSGI service endpoint
    Alias /$INSTANCE "${INSTROOT}/${INSTANCE}/${INSTANCE}/wsgi.py"
    <Directory "${INSTROOT}/${INSTANCE}/${INSTANCE}">
            Options +ExecCGI -MultiViews +FollowSymLinks
            AddHandler wsgi-script .py
            WSGIProcessGroup eoxs_ows
            AllowOverride None
            Order Allow,Deny
            Allow from all
            Header set Access-Control-Allow-Origin "*"
            Header set Access-Control-Allow-Headers Content-Type
            Header set Access-Control-Allow-Methods "POST, GET"
    </Directory>

    # static content
    Alias $INSTSTAT_URL "$INSTSTAT_DIR"
    <Directory "$INSTSTAT_DIR">
            Options -MultiViews +FollowSymLinks
            AllowOverride None
            Order Allow,Deny
            Allow from all
            Header set Access-Control-Allow-Origin "*"
    </Directory>

    # EOXS00_END - EOxServer instance - Do not edit or remove this line!
.
wq
END

#-------------------------------------------------------------------------------
# EOxServer configuration

# set the service url and log-file
#/^[	 ]*logging_filename[	 ]*=/s;\(^[	 ]*logging_filename[	 ]*=\).*;\1${EOXSLOG};
sudo -u "$VIRUSER" ex "$EOXSCONF" <<END
/^[	 ]*http_service_url[	 ]*=/s;\(^[	 ]*http_service_url[	 ]*=\).*;\1${EOXSURL};
g/^#.*supported_crs/,/^$/d
/\[services\.ows\.wms\]/a

supported_crs=4326,3857,900913, # WGS84, WGS84 Pseudo-Mercator, and GoogleEarth spherical mercator
        3035, #ETRS89
        2154, # RGF93 / Lambert-93
        32601,32602,32603,32604,32605,32606,32607,32608,32609,32610, # WGS84 UTM  1N-10N
        32611,32612,32613,32614,32615,32616,32617,32618,32619,32620, # WGS84 UTM 11N-20N
        32621,32622,32623,32624,32625,32626,32627,32628,32629,32630, # WGS84 UTM 21N-30N
        32631,32632,32633,32634,32635,32636,32637,32638,32639,32640, # WGS84 UTM 31N-40N
        32641,32642,32643,32644,32645,32646,32647,32648,32649,32650, # WGS84 UTM 41N-50N
        32651,32652,32653,32654,32655,32656,32657,32658,32659,32660, # WGS84 UTM 51N-60N
        32701,32702,32703,32704,32705,32706,32707,32708,32709,32710, # WGS84 UTM  1S-10S
        32711,32712,32713,32714,32715,32716,32717,32718,32719,32720, # WGS84 UTM 11S-20S
        32721,32722,32723,32724,32725,32726,32727,32728,32729,32730, # WGS84 UTM 21S-30S
        32731,32732,32733,32734,32735,32736,32737,32738,32739,32740, # WGS84 UTM 31S-40S
        32741,32742,32743,32744,32745,32746,32747,32748,32749,32750, # WGS84 UTM 41S-50S
        32751,32752,32753,32754,32755,32756,32757,32758,32759,32760  # WGS84 UTM 51S-60S
        #32661,32761, # WGS84 UPS-N and UPS-S
.
/\[services\.ows\.wcs\]/a

supported_crs=4326,3857,900913, # WGS84, WGS84 Pseudo-Mercator, and GoogleEarth spherical mercator
        3035, #ETRS89
        2154, # RGF93 / Lambert-93
        32601,32602,32603,32604,32605,32606,32607,32608,32609,32610, # WGS84 UTM  1N-10N
        32611,32612,32613,32614,32615,32616,32617,32618,32619,32620, # WGS84 UTM 11N-20N
        32621,32622,32623,32624,32625,32626,32627,32628,32629,32630, # WGS84 UTM 21N-30N
        32631,32632,32633,32634,32635,32636,32637,32638,32639,32640, # WGS84 UTM 31N-40N
        32641,32642,32643,32644,32645,32646,32647,32648,32649,32650, # WGS84 UTM 41N-50N
        32651,32652,32653,32654,32655,32656,32657,32658,32659,32660, # WGS84 UTM 51N-60N
        32701,32702,32703,32704,32705,32706,32707,32708,32709,32710, # WGS84 UTM  1S-10S
        32711,32712,32713,32714,32715,32716,32717,32718,32719,32720, # WGS84 UTM 11S-20S
        32721,32722,32723,32724,32725,32726,32727,32728,32729,32730, # WGS84 UTM 21S-30S
        32731,32732,32733,32734,32735,32736,32737,32738,32739,32740, # WGS84 UTM 31S-40S
        32741,32742,32743,32744,32745,32746,32747,32748,32749,32750, # WGS84 UTM 41S-50S
        32751,32752,32753,32754,32755,32756,32757,32758,32759,32760  # WGS84 UTM 51S-60S
        #32661,32761, # WGS84 UPS-N and UPS-S
.
wq
END

# set the allowed hosts
sudo -u "$VIRUSER" ex "$SETTINGS" <<END
1,\$s/\(^ALLOWED_HOSTS[	 ]*=[	 ]*\).*/\1['$HOSTNAME','127.0.0.1','::1']/
wq
END

# set-up logging
sudo -u "$VIRUSER" ex "$SETTINGS" <<END
g/^DEBUG[	 ]*=/s#\(^DEBUG[	 ]*=[	 ]*\).*#\1True#
wq
END
#wq

# touch the logfifile and set the right permissions
[ -f "$EOXSLOG" ] && rm -fv "$EOXSLOG"
touch "$EOXSLOG"
chown -v "$VIRUSER:$VIRGROUP" "$EOXSLOG"
chmod -v 0664 "$EOXSLOG"

#setup logrotate configuration
# cat >"/etc/logrotate.d/odaos_eoxserver" <<END
# $EOXSLOG {
#     copytruncate
#     daily
#     minsize 1M
#     compress
#     rotate 7
#     missingok
# }
# END

#-------------------------------------------------------------------------------
# Django syncdb (without interactive prompts)

info "Initializing EOxServer instance '${INSTANCE}' ..."

# collect static files
sudo -u "$VIRUSER" python "$MNGCMD" collectstatic -l --noinput

# setup new database
sudo -u "$VIRUSER" python "$MNGCMD" syncdb --noinput

#-------------------------------------------------------------------------------
# restart apache to force the changes to take effect

service httpd restart
